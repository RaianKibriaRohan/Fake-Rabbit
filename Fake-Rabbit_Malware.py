import base64
import codecs
from Crypto.Cipher import AES
from googletrans import Translator
from stegano import lsb
import pyfiglet
from PIL import Image
import exifread
from geopy.geocoders import Nominatim

# ---------- ASCII Art Banner ----------
def show_banner():
    banner = pyfiglet.figlet_format("Fake Rabbit", font="slant")
    skull = r"""
              ______
           .-'      '-.
          /            \
         |              |
         |,  .-.  .-.  ,|
         | )(_o/  \o_)( |
         |/     /\     \|
         (_     ^^     _)
          \__|IIIIII|__/
           | \IIIIII/ |
           \          /
            `--------`
    """
    print(banner+skull)

# ---------- Decryption Functions ----------
def caesar_decrypt(ciphertext, shift=3):
    result = ''
    for char in ciphertext:
        if char.isalpha():
            offset = 65 if char.isupper() else 97
            result += chr((ord(char) - shift - offset) % 26 + offset)
        else:
            result += char
    return result

def rot13_decrypt(ciphertext):
    return codecs.decode(ciphertext, 'rot_13')

def xor_decrypt(ciphertext, key):
    return ''.join(chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(ciphertext))

def base64_decode(ciphertext):
    try:
        return base64.b64decode(ciphertext).decode('utf-8')
    except:
        return "Invalid Base64"

def aes_decrypt(ciphertext, key, iv):
    try:
        cipher = AES.new(key.encode(), AES.MODE_CBC, iv.encode())
        decrypted = cipher.decrypt(base64.b64decode(ciphertext))
        return decrypted.rstrip(b"\0").decode()
    except Exception as e:
        return f"Failed to decrypt AES: {e}"

# ---------- Translator Function ----------
def translate_text(text):
    try:
        translator = Translator()
        result = translator.translate(text, dest='en')
        return f"Translated ({result.src} → en): {result.text}"
    except Exception as e:
        return f"Translation failed: {e}"

# ---------- Steganography Function ----------
def extract_hidden_message(image_path):
    try:
        secret = lsb.reveal(image_path)
        return secret if secret else "No hidden message found."
    except Exception as e:
        return f"Failed to read image: {e}"

# ---------- Image Metadata Extraction and Reverse Geocoding ----------
def get_exif_data(image_path):
    try:
        with open(image_path, 'rb') as f:
            tags = exifread.process_file(f)
    except Exception as e:
        return None, f"Error opening file: {e}"

    camera_make = tags.get('Image Make', 'Unknown')
    camera_model = tags.get('Image Model', 'Unknown')

    gps_latitude = tags.get('GPS GPSLatitude')
    gps_latitude_ref = tags.get('GPS GPSLatitudeRef')
    gps_longitude = tags.get('GPS GPSLongitude')
    gps_longitude_ref = tags.get('GPS GPSLongitudeRef')

    def convert_to_degrees(value):
        d = float(value.values[0].num) / float(value.values[0].den)
        m = float(value.values[1].num) / float(value.values[1].den)
        s = float(value.values[2].num) / float(value.values[2].den)
        return d + (m / 60.0) + (s / 3600.0)

    lat = None
    lon = None
    if gps_latitude and gps_latitude_ref and gps_longitude and gps_longitude_ref:
        lat = convert_to_degrees(gps_latitude)
        if gps_latitude_ref.values[0] != 'N':
            lat = -lat

        lon = convert_to_degrees(gps_longitude)
        if gps_longitude_ref.values[0] != 'E':
            lon = -lon

    return {
        'camera_make': str(camera_make),
        'camera_model': str(camera_model),
        'latitude': lat,
        'longitude': lon
    }, None

def reverse_geocode(lat, lon):
    try:
        geolocator = Nominatim(user_agent="fake_rabbit_image_info")
        location = geolocator.reverse((lat, lon), language='en')
        if location:
            address = location.raw.get('address', {})
            place = address.get('city') or address.get('town') or address.get('village') or ''
            country = address.get('country', '')
            return place, country
        else:
            return None, None
    except Exception as e:
        return None, None

def decimal_to_dms(decimal, coord_type):
    degrees = int(abs(decimal))
    minutes_float = (abs(decimal) - degrees) * 60
    minutes = int(minutes_float)
    seconds = (minutes_float - minutes) * 60

    if coord_type == 'lat':
        direction = 'N' if decimal >= 0 else 'S'
    else:
        direction = 'E' if decimal >= 0 else 'W'

    return f"{degrees}°{minutes}'{seconds:.1f}\"{direction}"

def extract_image_info():
    image_path = input("Enter image file path (e.g. 'image.jpg'): ")
    exif_data, error = get_exif_data(image_path)
    if error:
        print(error)
        return

    print(f"\nCamera Make: {exif_data['camera_make']}")
    print(f"Camera Model: {exif_data['camera_model']}")

    if exif_data['latitude'] is not None and exif_data['longitude'] is not None:
        lat_dms = decimal_to_dms(exif_data['latitude'], 'lat')
        lon_dms = decimal_to_dms(exif_data['longitude'], 'lon')
        print(f"Coordinates: {lat_dms}  {lon_dms}")
        place, country = reverse_geocode(exif_data['latitude'], exif_data['longitude'])
        if place or country:
            print(f"Place: {place if place else 'Unknown'}")
            print(f"Country: {country if country else 'Unknown'}")
        else:
            print("Could not retrieve place or country name from coordinates.")
    else:
        print("No GPS data found in image.")

# ---------- Main Menu ----------
def main():
    show_banner()
    while True:
        print("\n--- Universal Tool Menu ---")
        print("1. Decrypt Encrypted Message")
        print("2. Translate Text to English")
        print("3. Extract Hidden Text from Image")
        print("4. Extract Image Metadata and Location Info")  # New option added here
        print("5. Exit")
        choice = input("Choose an option: ")

        if choice == '1':
            text = input("Enter encrypted text: ")
            xor_key = "mykey"
            aes_key = "thisisakey123456"
            aes_iv = "thisisaninitvectr"
            print("\nDecryption Attempts:")
            print("Caesar (shift=3):", caesar_decrypt(text))
            print("ROT13:", rot13_decrypt(text))
            print("Base64:", base64_decode(text))
            print("XOR:", xor_decrypt(text, xor_key))
            print("AES:", aes_decrypt(text, aes_key, aes_iv))

        elif choice == '2':
            text = input("Enter text in any language: ")
            print(translate_text(text))

        elif choice == '3':
            image_path = input("Enter image file path (e.g. 'secret.png'): ")
            print("Hidden message:", extract_hidden_message(image_path))

        elif choice == '4':
            extract_image_info()

        elif choice == '5':
            print("I will be back to crush you!!!")
            break

        else:
            print("Invalid option. Try again.")

if __name__ == "__main__":
    main()
